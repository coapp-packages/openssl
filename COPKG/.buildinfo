@import "version.inc";

#product-info  {
    product-name: "openssl";
    version: "1.0.0f";
    original-source-location: "http://openssl.org/source/openssl-1.0.0f.tar.gz";
    original-source-website: "http://openssl.org/";
    license: "Custom - see LICENSE for detils";
    packager: "Hamish C, Vincent P, Garrett Serack";
}

/* 
    Maintainer notes:
    
    After merging upstream branch, make sure you delete 
    
        Makefile
        crypto\opensslconf.h
        
    (they get modified by the build anyway) 
    
    .. otherwise ptk verify will fail
*/

test {
}

package { 
    default : false;
    uses : release;
    
    build-command: @"
    ";
    
    clean-command: @"
    ";
}

release {
    uses : { tools, /*x86, */ x64 };

    set: { 
        BUILD_CFG ="release";
    };
    
    
    build-command: @"
    ";
    
    clean-command: @"
    ";
}

debug {

    uses : { prep, x86, x64 };

    set: { 
        BUILD_CFG ="debug";
    };

    
    build-command: @"
    ";
    
    clean-command: @"
    ";

}

tools{
    default : false;
    
    requires: {
        "nasm-2.10.8-x86-1e373a58e25250cb", // need nasm installed to do assembly
        // "perl...?", // need perl installed to to perl scripts
    };
}

prep {
    default : false;

    build-command:@"
        mkdir intermediate
        mkdir intermediate\${OUTPUT_ARCH}
        mkdir intermediate\${OUTPUT_ARCH}\${BUILD_CFG}
        
        mkdir output
        mkdir output\${OUTPUT_ARCH}
        mkdir output\${OUTPUT_ARCH}\${BUILD_CFG}
        mkdir output\${OUTPUT_ARCH}\${BUILD_CFG}\include
    ";
    
    clean-command:@"
        rmdir /s /q intermediate\${OUTPUT_ARCH}\${BUILD_CFG}        > nul 2> nul
        rmdir /s /q intermediate\${OUTPUT_ARCH}                     > nul 2> nul
        rmdir /s /q intermediate                                    > nul 2> nul
        
        rmdir /s /q output\${OUTPUT_ARCH}\${BUILD_CFG}\include > nul 2> nul
        rmdir /s /q output\${OUTPUT_ARCH}\${BUILD_CFG}        > nul 2> nul
        rmdir /s /q output\${OUTPUT_ARCH}                     > nul 2> nul
        rmdir /s /q output                                    > nul 2> nul
    ";    
}

x86{
    compiler: vc10;
    platform: x86;
    uses : prep;
    
    requires: "zlib-dev[vc10]-1.2.5-x86-1e373a58e25250cb";

    set: { 
        OUTPUT_ARCH="x86";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
    };

    targets: { 
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\libeay32.dll",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\libeay32.lib",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\ssleay32.dll",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\ssleay32.lib",       
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\openssl.exe",   
    };
     
    build-command:@"
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
        echo %CL% | findstr ISOLATION_AWARE || set CL=%CL% -D ISOLATION_AWARE_ENABLED -I %cd%\output
        
        perl Configure no-rc5 no-idea enable-mdc2 enable-zlib VC-WIN32 -I%COAPP%/include/zlib -L%COAPP%/lib/x86             || goto failed
        call ms\do_nasm                                                                                                     || goto failed
        call ms\do_ms                                                                                                       || goto failed
        nmake -f ms\ntdll.mak                                                                                               || goto failed
        
        REM use simplesigner to add zlib to the dll manifests
        simplesigner --reference-assembly=""zlib, Version=1.2.5.0, PublicKeyToken=1e373a58e25250cb, ProcessorArchitecture=x86"" out32dll\ssleay32.dll out32dll\libeay32.dll || goto failed
    ";
     
    clean-command:@"
        del /Q MINFO Makefile.bak Makefile crypto\buildinf.h crypto\opensslconf.h.bak crypto\opensslconf.h > NUL 2> NUL
        pushd ms
        del /Q bcb.mak libeay32.def nt.mak ntdll.mak ssleay32.def uptable.asm uptable.obj version32.rc > NUL 2> NUL
        popd
        IF EXIST out32dll rmdir /Q /S out32dll > NUL 2> NUL
        IF EXIST tmp32dll rmdir /Q /S tmp32dll > NUL 2> NUL
        IF EXIST inc32 rmdir /Q /S inc32 > NUL 2> NUL
    ";
};

x64 {
    compiler: vc10;
    platform: x64;

    requires: "zlib-dev[vc10]-1.2.5-x64-1e373a58e25250cb";
     
    set: { 
        OUTPUT_ARCH="x64";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
    };     
     
    targets: { 
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\libeay32.dll",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\libeay32.lib",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\ssleay32.dll",
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\ssleay32.lib",  
        "output\${OUTPUT_ARCH}\${BUILD_CFG}\openssl.exe",           
    };
     
    build-command:@"
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
        echo %CL% | findstr ISOLATION_AWARE || set CL=%CL% -D ISOLATION_AWARE_ENABLED -I %cd%\output
        
        perl Configure no-rc5 no-idea enable-mdc2 enable-zlib VC-WIN64A -I%COAPP%/include/zlib -L%COAPP%/lib/x64        || goto failed

        call ms\do_win64a                                                                                               || goto failed
        rem use powershell to create x64 build.  This will save headaches later when we come to build libssh
        powershell -command ""Get-Content ms\ntdll.mak | ForEach-Object { $_ -replace \""out32dll\"", \""output\${OUTPUT_ARCH}\${BUILD_CFG}\"" } | ForEach-Object { $_ -replace \""tmp32dll\"", \""intermediate\${OUTPUT_ARCH}\${BUILD_CFG}\"" } | ForEach-Object { $_ -replace \""inc32\"", \""output\${OUTPUT_ARCH}\${BUILD_CFG}\include\"" } | Set-Content ms\ntdll64.mak""
        nmake -f ms\ntdll64.mak                                                                                         || goto failed
        
        REM use simplesigner to add zlib to the dll manifests
        simplesigner --reference-assembly=""zlib, Version=1.2.5.0, PublicKeyToken=1e373a58e25250cb, ProcessorArchitecture=x64"" output\${OUTPUT_ARCH}\${BUILD_CFG}\ssleay32.dll output\${OUTPUT_ARCH}\${BUILD_CFG}\libeay32.dll || goto failed
    ";
     
    clean-command:@"
        del /Q MINFO Makefile.bak Makefile crypto\buildinf.h crypto\opensslconf.h.bak crypto\opensslconf.h > NUL 2> NUL
        pushd ms
        del /Q bcb.mak libeay32.def nt.mak ntdll.mak ssleay32.def uptable.asm uptable.obj version32.rc ntdll64.mak > NUL 2> NUL
        popd
        IF EXIST out64dll rmdir /Q /S out64dll > NUL 2> NUL
        IF EXIST tmp64dll rmdir /Q /S tmp64dll > NUL 2> NUL
        IF EXIST inc64 rmdir /Q /S inc64  > NUL 2> NUL
    ";
};
