@import basic.autopkg;
@import @"version.inc";
@import @"zlib_dep.autopkg";


configurations {
	Linkage {
		// the first choice is the default
		// so, unless a choice is made, it will assume the first choice
		choices: { dynamic, 
//					static 
				};
	}
};

nuget {
	// the nuspec file metadata. Gets created/updated on build
	nuspec {
		id = openssl;
		version : ${package-version};
		title: The OpenSSL library;
		authors: {Mark J. Cox, Ralf S. Engelschall, Dr. Stephen Henson, Ben Laurie, Garrett Serack, Tim Rogers};
		owners: {CoApp Project, Garrett Serack};
		licenseUrl: "http://www.openssl.org/source/license.html";
		projectUrl: "http://github.com/coapp-packages/openssl";
		iconUrl: "http://www.openssl.org/images/page-head-tm.jpg";
		requireLicenseAcceptance:false;
		summary:An OpenSSL library;
		description: @"Native OpenSSL library.
	OpenSSL homepage:  http://www.openssl.org";
		releaseNotes: "Release of OpenSSL 1.0.1e libraries.";
		copyright: Copyright 2013;
		tags: { openssl, native, CoApp };

		// .dependency { id : ...; version : ...; }
		// .dependency { id : ...; version : ...; }
		// .dependency { id : ...; version : ...; }

	};

	// the files that go into the content folders
	// (inserted into the nuspec file)
	files {
		include: {
			#destination = ${d_root}\include\${condition}\openssl;

			..\output\common\**\*
		};
		
		docs: {  ..\doc\**\* };
    
		// zlib deps
		/*
		[Win32,v110,dynamic] 
			bin += {..\.nuget\zlib.1.2.7.14\lib\native\bin\Win32\v110\dynamic\zlib1.dll};
		
		[x64,v110,dynamic]
			bin += {..\.nuget\zlib.1.2.7.14\lib\native\bin\x64\v110\dynamic\zlib1.dll};
				
		[Win32,v100,dynamic]
			bin += {..\.nuget\zlib.1.2.7.14\lib\native\bin\Win32\v100\dynamic\zlib1.dll};
		
		[x64,v100,dynamic]
			bin += {..\.nuget\zlib.1.2.7.14\lib\native\bin\x64\v100\dynamic\zlib1.dll};
		*/
	
		[Win32,v110,dynamic] { 
			alsoInclude : {
				#destination = ${d_root}\include\${condition}\openssl;
				..\output\v110\x86\release\include\openssl\opensslconf.h
			};
			lib: { 
				..\output\v110\x86\release\libeay32.lib,
				..\output\v110\x86\release\ssleay32.lib
			};
			bin += { 
				..\output\v110\x86\release\libeay32.dll,
				..\output\v110\x86\release\ssleay32.dll
			};
		}

		[x64,v110,dynamic] {
			alsoInclude : {
				#destination = ${d_root}\include\${condition}\openssl;
				..\output\v110\x64\release\include\openssl\opensslconf.h
			};
			lib: { 
				..\output\v110\x64\release\libeay32.lib,
				..\output\v110\x64\release\ssleay32.lib
			};
			bin += { 
				..\output\v110\x64\release\libeay32.dll,
				..\output\v110\x64\release\ssleay32.dll
			};
		}
		
		[Win32,v100,dynamic] { 
			alsoInclude : {
				#destination = ${d_root}\include\${condition}\openssl;
				..\output\v100\x86\release\include\openssl\opensslconf.h
			};
			lib: { 
				..\output\v100\x86\release\libeay32.lib,
				..\output\v100\x86\release\ssleay32.lib
			};
			bin += { 
				..\output\v100\x86\release\libeay32.dll,
				..\output\v100\x86\release\ssleay32.dll
			};
		}

		[x64,v100,dynamic] {
			alsoInclude : {
				#destination = ${d_root}\include\${condition}\openssl;
				..\output\v100\x64\release\include\openssl\opensslconf.h
			};
			lib: { 
				..\output\v100\x64\release\libeay32.lib,
				..\output\v100\x64\release\ssleay32.lib
			};
			bin += { 
				..\output\v100\x64\release\libeay32.dll,
				..\output\v100\x64\release\ssleay32.dll
			};
		}
		
	};
	
	// include\openssl\<misc.h>
	// "openssl\....h"

	// the VC++ .props file that gets generated and inserted into the ${d_content} folder
	props { 
		// we're going to generate a number of properties anyway. 
        // so even if the packager doesn't specify the props object 
        // we're going to make this file.
	};

	// the VC++ .targets file that gets generated and inserted into the ${d_content} folder
	targets {
		// every configuration needs to reference the include directories.
		// Includes += ${pkg_root}${d_include};
		// Defines += HAS_ZLIB;
		
		[Win32,v110,dynamic]
		 Includes += ${pkg_root}${d_include};
		[x64,v110,dynamic]
		 Includes += ${pkg_root}${d_include};
		[Win32,v100,dynamic]
		 Includes += ${pkg_root}${d_include};
		[x64,v100,dynamic]
		 Includes += ${pkg_root}${d_include};

	};
}

